/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Branch {

  public interface Iface {

    public void initBranch(int balance, List<BranchID> all_branches) throws SystemException, org.apache.thrift.TException;

    public void transferMoney(TransferMessage message, int messageId) throws SystemException, org.apache.thrift.TException;

    public void initSnapshot(int snapshotId) throws SystemException, org.apache.thrift.TException;

    public void Marker(BranchID branchId, int snapshotId, int messageId) throws SystemException, org.apache.thrift.TException;

    public LocalSnapshot retrieveSnapshot(int snapshotId) throws SystemException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void initBranch(int balance, List<BranchID> all_branches, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void transferMoney(TransferMessage message, int messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void initSnapshot(int snapshotId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Marker(BranchID branchId, int snapshotId, int messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void retrieveSnapshot(int snapshotId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void initBranch(int balance, List<BranchID> all_branches) throws SystemException, org.apache.thrift.TException
    {
      send_initBranch(balance, all_branches);
      recv_initBranch();
    }

    public void send_initBranch(int balance, List<BranchID> all_branches) throws org.apache.thrift.TException
    {
      initBranch_args args = new initBranch_args();
      args.setBalance(balance);
      args.setAll_branches(all_branches);
      sendBase("initBranch", args);
    }

    public void recv_initBranch() throws SystemException, org.apache.thrift.TException
    {
      initBranch_result result = new initBranch_result();
      receiveBase(result, "initBranch");
      if (result.systemException != null) {
        throw result.systemException;
      }
      return;
    }

    public void transferMoney(TransferMessage message, int messageId) throws SystemException, org.apache.thrift.TException
    {
      send_transferMoney(message, messageId);
      recv_transferMoney();
    }

    public void send_transferMoney(TransferMessage message, int messageId) throws org.apache.thrift.TException
    {
      transferMoney_args args = new transferMoney_args();
      args.setMessage(message);
      args.setMessageId(messageId);
      sendBase("transferMoney", args);
    }

    public void recv_transferMoney() throws SystemException, org.apache.thrift.TException
    {
      transferMoney_result result = new transferMoney_result();
      receiveBase(result, "transferMoney");
      if (result.systemException != null) {
        throw result.systemException;
      }
      return;
    }

    public void initSnapshot(int snapshotId) throws SystemException, org.apache.thrift.TException
    {
      send_initSnapshot(snapshotId);
      recv_initSnapshot();
    }

    public void send_initSnapshot(int snapshotId) throws org.apache.thrift.TException
    {
      initSnapshot_args args = new initSnapshot_args();
      args.setSnapshotId(snapshotId);
      sendBase("initSnapshot", args);
    }

    public void recv_initSnapshot() throws SystemException, org.apache.thrift.TException
    {
      initSnapshot_result result = new initSnapshot_result();
      receiveBase(result, "initSnapshot");
      if (result.systemException != null) {
        throw result.systemException;
      }
      return;
    }

    public void Marker(BranchID branchId, int snapshotId, int messageId) throws SystemException, org.apache.thrift.TException
    {
      send_Marker(branchId, snapshotId, messageId);
      recv_Marker();
    }

    public void send_Marker(BranchID branchId, int snapshotId, int messageId) throws org.apache.thrift.TException
    {
      Marker_args args = new Marker_args();
      args.setBranchId(branchId);
      args.setSnapshotId(snapshotId);
      args.setMessageId(messageId);
      sendBase("Marker", args);
    }

    public void recv_Marker() throws SystemException, org.apache.thrift.TException
    {
      Marker_result result = new Marker_result();
      receiveBase(result, "Marker");
      if (result.systemException != null) {
        throw result.systemException;
      }
      return;
    }

    public LocalSnapshot retrieveSnapshot(int snapshotId) throws SystemException, org.apache.thrift.TException
    {
      send_retrieveSnapshot(snapshotId);
      return recv_retrieveSnapshot();
    }

    public void send_retrieveSnapshot(int snapshotId) throws org.apache.thrift.TException
    {
      retrieveSnapshot_args args = new retrieveSnapshot_args();
      args.setSnapshotId(snapshotId);
      sendBase("retrieveSnapshot", args);
    }

    public LocalSnapshot recv_retrieveSnapshot() throws SystemException, org.apache.thrift.TException
    {
      retrieveSnapshot_result result = new retrieveSnapshot_result();
      receiveBase(result, "retrieveSnapshot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveSnapshot failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void initBranch(int balance, List<BranchID> all_branches, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initBranch_call method_call = new initBranch_call(balance, all_branches, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initBranch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int balance;
      private List<BranchID> all_branches;
      public initBranch_call(int balance, List<BranchID> all_branches, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.balance = balance;
        this.all_branches = all_branches;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initBranch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initBranch_args args = new initBranch_args();
        args.setBalance(balance);
        args.setAll_branches(all_branches);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_initBranch();
      }
    }

    public void transferMoney(TransferMessage message, int messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transferMoney_call method_call = new transferMoney_call(message, messageId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transferMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransferMessage message;
      private int messageId;
      public transferMoney_call(TransferMessage message, int messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
        this.messageId = messageId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transferMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transferMoney_args args = new transferMoney_args();
        args.setMessage(message);
        args.setMessageId(messageId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_transferMoney();
      }
    }

    public void initSnapshot(int snapshotId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initSnapshot_call method_call = new initSnapshot_call(snapshotId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initSnapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int snapshotId;
      public initSnapshot_call(int snapshotId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.snapshotId = snapshotId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initSnapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initSnapshot_args args = new initSnapshot_args();
        args.setSnapshotId(snapshotId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_initSnapshot();
      }
    }

    public void Marker(BranchID branchId, int snapshotId, int messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Marker_call method_call = new Marker_call(branchId, snapshotId, messageId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Marker_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BranchID branchId;
      private int snapshotId;
      private int messageId;
      public Marker_call(BranchID branchId, int snapshotId, int messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.branchId = branchId;
        this.snapshotId = snapshotId;
        this.messageId = messageId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Marker", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Marker_args args = new Marker_args();
        args.setBranchId(branchId);
        args.setSnapshotId(snapshotId);
        args.setMessageId(messageId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Marker();
      }
    }

    public void retrieveSnapshot(int snapshotId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retrieveSnapshot_call method_call = new retrieveSnapshot_call(snapshotId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveSnapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int snapshotId;
      public retrieveSnapshot_call(int snapshotId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.snapshotId = snapshotId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveSnapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveSnapshot_args args = new retrieveSnapshot_args();
        args.setSnapshotId(snapshotId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LocalSnapshot getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveSnapshot();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("initBranch", new initBranch());
      processMap.put("transferMoney", new transferMoney());
      processMap.put("initSnapshot", new initSnapshot());
      processMap.put("Marker", new Marker());
      processMap.put("retrieveSnapshot", new retrieveSnapshot());
      return processMap;
    }

    public static class initBranch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initBranch_args> {
      public initBranch() {
        super("initBranch");
      }

      public initBranch_args getEmptyArgsInstance() {
        return new initBranch_args();
      }
 
      protected boolean isOneway() {
        return false;
      }

      public initBranch_result getResult(I iface, initBranch_args args) throws org.apache.thrift.TException {
        initBranch_result result = new initBranch_result();
        try {
          iface.initBranch(args.balance, args.all_branches);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class transferMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transferMoney_args> {
      public transferMoney() {
        super("transferMoney");
      }

      public transferMoney_args getEmptyArgsInstance() {
        return new transferMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transferMoney_result getResult(I iface, transferMoney_args args) throws org.apache.thrift.TException {
        transferMoney_result result = new transferMoney_result();
        try {
          iface.transferMoney(args.message, args.messageId);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class initSnapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initSnapshot_args> {
      public initSnapshot() {
        super("initSnapshot");
      }

      public initSnapshot_args getEmptyArgsInstance() {
        return new initSnapshot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public initSnapshot_result getResult(I iface, initSnapshot_args args) throws org.apache.thrift.TException {
        initSnapshot_result result = new initSnapshot_result();
        try {
          iface.initSnapshot(args.snapshotId);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class Marker<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Marker_args> {
      public Marker() {
        super("Marker");
      }

      public Marker_args getEmptyArgsInstance() {
        return new Marker_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Marker_result getResult(I iface, Marker_args args) throws org.apache.thrift.TException {
        Marker_result result = new Marker_result();
        try {
          iface.Marker(args.branchId, args.snapshotId, args.messageId);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class retrieveSnapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveSnapshot_args> {
      public retrieveSnapshot() {
        super("retrieveSnapshot");
      }

      public retrieveSnapshot_args getEmptyArgsInstance() {
        return new retrieveSnapshot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveSnapshot_result getResult(I iface, retrieveSnapshot_args args) throws org.apache.thrift.TException {
        retrieveSnapshot_result result = new retrieveSnapshot_result();
        try {
          result.success = iface.retrieveSnapshot(args.snapshotId);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("initBranch", new initBranch());
      processMap.put("transferMoney", new transferMoney());
      processMap.put("initSnapshot", new initSnapshot());
      processMap.put("Marker", new Marker());
      processMap.put("retrieveSnapshot", new retrieveSnapshot());
      return processMap;
    }

    public static class initBranch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initBranch_args, Void> {
      public initBranch() {
        super("initBranch");
      }

      public initBranch_args getEmptyArgsInstance() {
        return new initBranch_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initBranch_result result = new initBranch_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initBranch_result result = new initBranch_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initBranch_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.initBranch(args.balance, args.all_branches,resultHandler);
      }
    }

    public static class transferMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transferMoney_args, Void> {
      public transferMoney() {
        super("transferMoney");
      }

      public transferMoney_args getEmptyArgsInstance() {
        return new transferMoney_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            transferMoney_result result = new transferMoney_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            transferMoney_result result = new transferMoney_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transferMoney_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.transferMoney(args.message, args.messageId,resultHandler);
      }
    }

    public static class initSnapshot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initSnapshot_args, Void> {
      public initSnapshot() {
        super("initSnapshot");
      }

      public initSnapshot_args getEmptyArgsInstance() {
        return new initSnapshot_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initSnapshot_result result = new initSnapshot_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initSnapshot_result result = new initSnapshot_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initSnapshot_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.initSnapshot(args.snapshotId,resultHandler);
      }
    }

    public static class Marker<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Marker_args, Void> {
      public Marker() {
        super("Marker");
      }

      public Marker_args getEmptyArgsInstance() {
        return new Marker_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Marker_result result = new Marker_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Marker_result result = new Marker_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Marker_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Marker(args.branchId, args.snapshotId, args.messageId,resultHandler);
      }
    }

    public static class retrieveSnapshot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveSnapshot_args, LocalSnapshot> {
      public retrieveSnapshot() {
        super("retrieveSnapshot");
      }

      public retrieveSnapshot_args getEmptyArgsInstance() {
        return new retrieveSnapshot_args();
      }

      public AsyncMethodCallback<LocalSnapshot> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LocalSnapshot>() { 
          public void onComplete(LocalSnapshot o) {
            retrieveSnapshot_result result = new retrieveSnapshot_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveSnapshot_result result = new retrieveSnapshot_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveSnapshot_args args, org.apache.thrift.async.AsyncMethodCallback<LocalSnapshot> resultHandler) throws TException {
        iface.retrieveSnapshot(args.snapshotId,resultHandler);
      }
    }

  }

  public static class initBranch_args implements org.apache.thrift.TBase<initBranch_args, initBranch_args._Fields>, java.io.Serializable, Cloneable, Comparable<initBranch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initBranch_args");

    private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ALL_BRANCHES_FIELD_DESC = new org.apache.thrift.protocol.TField("all_branches", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initBranch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initBranch_argsTupleSchemeFactory());
    }

    public int balance; // required
    public List<BranchID> all_branches; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BALANCE((short)1, "balance"),
      ALL_BRANCHES((short)2, "all_branches");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BALANCE
            return BALANCE;
          case 2: // ALL_BRANCHES
            return ALL_BRANCHES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BALANCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ALL_BRANCHES, new org.apache.thrift.meta_data.FieldMetaData("all_branches", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BranchID.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initBranch_args.class, metaDataMap);
    }

    public initBranch_args() {
    }

    public initBranch_args(
      int balance,
      List<BranchID> all_branches)
    {
      this();
      this.balance = balance;
      setBalanceIsSet(true);
      this.all_branches = all_branches;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initBranch_args(initBranch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.balance = other.balance;
      if (other.isSetAll_branches()) {
        List<BranchID> __this__all_branches = new ArrayList<BranchID>(other.all_branches.size());
        for (BranchID other_element : other.all_branches) {
          __this__all_branches.add(new BranchID(other_element));
        }
        this.all_branches = __this__all_branches;
      }
    }

    public initBranch_args deepCopy() {
      return new initBranch_args(this);
    }

    @Override
    public void clear() {
      setBalanceIsSet(false);
      this.balance = 0;
      this.all_branches = null;
    }

    public int getBalance() {
      return this.balance;
    }

    public initBranch_args setBalance(int balance) {
      this.balance = balance;
      setBalanceIsSet(true);
      return this;
    }

    public void unsetBalance() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
    }

    /** Returns true if field balance is set (has been assigned a value) and false otherwise */
    public boolean isSetBalance() {
      return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
    }

    public void setBalanceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
    }

    public int getAll_branchesSize() {
      return (this.all_branches == null) ? 0 : this.all_branches.size();
    }

    public java.util.Iterator<BranchID> getAll_branchesIterator() {
      return (this.all_branches == null) ? null : this.all_branches.iterator();
    }

    public void addToAll_branches(BranchID elem) {
      if (this.all_branches == null) {
        this.all_branches = new ArrayList<BranchID>();
      }
      this.all_branches.add(elem);
    }

    public List<BranchID> getAll_branches() {
      return this.all_branches;
    }

    public initBranch_args setAll_branches(List<BranchID> all_branches) {
      this.all_branches = all_branches;
      return this;
    }

    public void unsetAll_branches() {
      this.all_branches = null;
    }

    /** Returns true if field all_branches is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_branches() {
      return this.all_branches != null;
    }

    public void setAll_branchesIsSet(boolean value) {
      if (!value) {
        this.all_branches = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BALANCE:
        if (value == null) {
          unsetBalance();
        } else {
          setBalance((Integer)value);
        }
        break;

      case ALL_BRANCHES:
        if (value == null) {
          unsetAll_branches();
        } else {
          setAll_branches((List<BranchID>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BALANCE:
        return Integer.valueOf(getBalance());

      case ALL_BRANCHES:
        return getAll_branches();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BALANCE:
        return isSetBalance();
      case ALL_BRANCHES:
        return isSetAll_branches();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initBranch_args)
        return this.equals((initBranch_args)that);
      return false;
    }

    public boolean equals(initBranch_args that) {
      if (that == null)
        return false;

      boolean this_present_balance = true;
      boolean that_present_balance = true;
      if (this_present_balance || that_present_balance) {
        if (!(this_present_balance && that_present_balance))
          return false;
        if (this.balance != that.balance)
          return false;
      }

      boolean this_present_all_branches = true && this.isSetAll_branches();
      boolean that_present_all_branches = true && that.isSetAll_branches();
      if (this_present_all_branches || that_present_all_branches) {
        if (!(this_present_all_branches && that_present_all_branches))
          return false;
        if (!this.all_branches.equals(that.all_branches))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(initBranch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBalance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAll_branches()).compareTo(other.isSetAll_branches());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_branches()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_branches, other.all_branches);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initBranch_args(");
      boolean first = true;

      sb.append("balance:");
      sb.append(this.balance);
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_branches:");
      if (this.all_branches == null) {
        sb.append("null");
      } else {
        sb.append(this.all_branches);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initBranch_argsStandardSchemeFactory implements SchemeFactory {
      public initBranch_argsStandardScheme getScheme() {
        return new initBranch_argsStandardScheme();
      }
    }

    private static class initBranch_argsStandardScheme extends StandardScheme<initBranch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initBranch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BALANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.balance = iprot.readI32();
                struct.setBalanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ALL_BRANCHES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.all_branches = new ArrayList<BranchID>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    BranchID _elem10;
                    _elem10 = new BranchID();
                    _elem10.read(iprot);
                    struct.all_branches.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_branchesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initBranch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        oprot.writeI32(struct.balance);
        oprot.writeFieldEnd();
        if (struct.all_branches != null) {
          oprot.writeFieldBegin(ALL_BRANCHES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_branches.size()));
            for (BranchID _iter11 : struct.all_branches)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initBranch_argsTupleSchemeFactory implements SchemeFactory {
      public initBranch_argsTupleScheme getScheme() {
        return new initBranch_argsTupleScheme();
      }
    }

    private static class initBranch_argsTupleScheme extends TupleScheme<initBranch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initBranch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBalance()) {
          optionals.set(0);
        }
        if (struct.isSetAll_branches()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBalance()) {
          oprot.writeI32(struct.balance);
        }
        if (struct.isSetAll_branches()) {
          {
            oprot.writeI32(struct.all_branches.size());
            for (BranchID _iter12 : struct.all_branches)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initBranch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.balance = iprot.readI32();
          struct.setBalanceIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_branches = new ArrayList<BranchID>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              BranchID _elem15;
              _elem15 = new BranchID();
              _elem15.read(iprot);
              struct.all_branches.add(_elem15);
            }
          }
          struct.setAll_branchesIsSet(true);
        }
      }
    }

  }

  public static class initBranch_result implements org.apache.thrift.TBase<initBranch_result, initBranch_result._Fields>, java.io.Serializable, Cloneable, Comparable<initBranch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initBranch_result");

    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initBranch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initBranch_resultTupleSchemeFactory());
    }

    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initBranch_result.class, metaDataMap);
    }

    public initBranch_result() {
    }

    public initBranch_result(
      SystemException systemException)
    {
      this();
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initBranch_result(initBranch_result other) {
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public initBranch_result deepCopy() {
      return new initBranch_result(this);
    }

    @Override
    public void clear() {
      this.systemException = null;
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public initBranch_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initBranch_result)
        return this.equals((initBranch_result)that);
      return false;
    }

    public boolean equals(initBranch_result that) {
      if (that == null)
        return false;

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(initBranch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initBranch_result(");
      boolean first = true;

      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initBranch_resultStandardSchemeFactory implements SchemeFactory {
      public initBranch_resultStandardScheme getScheme() {
        return new initBranch_resultStandardScheme();
      }
    }

    private static class initBranch_resultStandardScheme extends StandardScheme<initBranch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initBranch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initBranch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initBranch_resultTupleSchemeFactory implements SchemeFactory {
      public initBranch_resultTupleScheme getScheme() {
        return new initBranch_resultTupleScheme();
      }
    }

    private static class initBranch_resultTupleScheme extends TupleScheme<initBranch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initBranch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSystemException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initBranch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class transferMoney_args implements org.apache.thrift.TBase<transferMoney_args, transferMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<transferMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferMoney_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transferMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transferMoney_argsTupleSchemeFactory());
    }

    public TransferMessage message; // required
    public int messageId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message"),
      MESSAGE_ID((short)2, "messageId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          case 2: // MESSAGE_ID
            return MESSAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferMessage.class)));
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferMoney_args.class, metaDataMap);
    }

    public transferMoney_args() {
    }

    public transferMoney_args(
      TransferMessage message,
      int messageId)
    {
      this();
      this.message = message;
      this.messageId = messageId;
      setMessageIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferMoney_args(transferMoney_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessage()) {
        this.message = new TransferMessage(other.message);
      }
      this.messageId = other.messageId;
    }

    public transferMoney_args deepCopy() {
      return new transferMoney_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
      setMessageIdIsSet(false);
      this.messageId = 0;
    }

    public TransferMessage getMessage() {
      return this.message;
    }

    public transferMoney_args setMessage(TransferMessage message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public int getMessageId() {
      return this.messageId;
    }

    public transferMoney_args setMessageId(int messageId) {
      this.messageId = messageId;
      setMessageIdIsSet(true);
      return this;
    }

    public void unsetMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    public void setMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((TransferMessage)value);
        }
        break;

      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      case MESSAGE_ID:
        return Integer.valueOf(getMessageId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      case MESSAGE_ID:
        return isSetMessageId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transferMoney_args)
        return this.equals((transferMoney_args)that);
      return false;
    }

    public boolean equals(transferMoney_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_messageId = true;
      boolean that_present_messageId = true;
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (this.messageId != that.messageId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transferMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferMoney_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      sb.append(this.messageId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (message != null) {
        message.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferMoney_argsStandardSchemeFactory implements SchemeFactory {
      public transferMoney_argsStandardScheme getScheme() {
        return new transferMoney_argsStandardScheme();
      }
    }

    private static class transferMoney_argsStandardScheme extends StandardScheme<transferMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transferMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.message = new TransferMessage();
                struct.message.read(iprot);
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageId = iprot.readI32();
                struct.setMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transferMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          struct.message.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeI32(struct.messageId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferMoney_argsTupleSchemeFactory implements SchemeFactory {
      public transferMoney_argsTupleScheme getScheme() {
        return new transferMoney_argsTupleScheme();
      }
    }

    private static class transferMoney_argsTupleScheme extends TupleScheme<transferMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        if (struct.isSetMessageId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMessage()) {
          struct.message.write(oprot);
        }
        if (struct.isSetMessageId()) {
          oprot.writeI32(struct.messageId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.message = new TransferMessage();
          struct.message.read(iprot);
          struct.setMessageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.messageId = iprot.readI32();
          struct.setMessageIdIsSet(true);
        }
      }
    }

  }

  public static class transferMoney_result implements org.apache.thrift.TBase<transferMoney_result, transferMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<transferMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferMoney_result");

    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transferMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transferMoney_resultTupleSchemeFactory());
    }

    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferMoney_result.class, metaDataMap);
    }

    public transferMoney_result() {
    }

    public transferMoney_result(
      SystemException systemException)
    {
      this();
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferMoney_result(transferMoney_result other) {
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public transferMoney_result deepCopy() {
      return new transferMoney_result(this);
    }

    @Override
    public void clear() {
      this.systemException = null;
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public transferMoney_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transferMoney_result)
        return this.equals((transferMoney_result)that);
      return false;
    }

    public boolean equals(transferMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transferMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferMoney_result(");
      boolean first = true;

      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferMoney_resultStandardSchemeFactory implements SchemeFactory {
      public transferMoney_resultStandardScheme getScheme() {
        return new transferMoney_resultStandardScheme();
      }
    }

    private static class transferMoney_resultStandardScheme extends StandardScheme<transferMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transferMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transferMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferMoney_resultTupleSchemeFactory implements SchemeFactory {
      public transferMoney_resultTupleScheme getScheme() {
        return new transferMoney_resultTupleScheme();
      }
    }

    private static class transferMoney_resultTupleScheme extends TupleScheme<transferMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSystemException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class initSnapshot_args implements org.apache.thrift.TBase<initSnapshot_args, initSnapshot_args._Fields>, java.io.Serializable, Cloneable, Comparable<initSnapshot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initSnapshot_args");

    private static final org.apache.thrift.protocol.TField SNAPSHOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initSnapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initSnapshot_argsTupleSchemeFactory());
    }

    public int snapshotId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SNAPSHOT_ID((short)1, "snapshotId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SNAPSHOT_ID
            return SNAPSHOT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SNAPSHOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SNAPSHOT_ID, new org.apache.thrift.meta_data.FieldMetaData("snapshotId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initSnapshot_args.class, metaDataMap);
    }

    public initSnapshot_args() {
    }

    public initSnapshot_args(
      int snapshotId)
    {
      this();
      this.snapshotId = snapshotId;
      setSnapshotIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initSnapshot_args(initSnapshot_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.snapshotId = other.snapshotId;
    }

    public initSnapshot_args deepCopy() {
      return new initSnapshot_args(this);
    }

    @Override
    public void clear() {
      setSnapshotIdIsSet(false);
      this.snapshotId = 0;
    }

    public int getSnapshotId() {
      return this.snapshotId;
    }

    public initSnapshot_args setSnapshotId(int snapshotId) {
      this.snapshotId = snapshotId;
      setSnapshotIdIsSet(true);
      return this;
    }

    public void unsetSnapshotId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID);
    }

    /** Returns true if field snapshotId is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshotId() {
      return EncodingUtils.testBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID);
    }

    public void setSnapshotIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SNAPSHOT_ID:
        if (value == null) {
          unsetSnapshotId();
        } else {
          setSnapshotId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SNAPSHOT_ID:
        return Integer.valueOf(getSnapshotId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SNAPSHOT_ID:
        return isSetSnapshotId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initSnapshot_args)
        return this.equals((initSnapshot_args)that);
      return false;
    }

    public boolean equals(initSnapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_snapshotId = true;
      boolean that_present_snapshotId = true;
      if (this_present_snapshotId || that_present_snapshotId) {
        if (!(this_present_snapshotId && that_present_snapshotId))
          return false;
        if (this.snapshotId != that.snapshotId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(initSnapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSnapshotId()).compareTo(other.isSetSnapshotId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshotId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotId, other.snapshotId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initSnapshot_args(");
      boolean first = true;

      sb.append("snapshotId:");
      sb.append(this.snapshotId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initSnapshot_argsStandardSchemeFactory implements SchemeFactory {
      public initSnapshot_argsStandardScheme getScheme() {
        return new initSnapshot_argsStandardScheme();
      }
    }

    private static class initSnapshot_argsStandardScheme extends StandardScheme<initSnapshot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initSnapshot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SNAPSHOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.snapshotId = iprot.readI32();
                struct.setSnapshotIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initSnapshot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SNAPSHOT_ID_FIELD_DESC);
        oprot.writeI32(struct.snapshotId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initSnapshot_argsTupleSchemeFactory implements SchemeFactory {
      public initSnapshot_argsTupleScheme getScheme() {
        return new initSnapshot_argsTupleScheme();
      }
    }

    private static class initSnapshot_argsTupleScheme extends TupleScheme<initSnapshot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSnapshotId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSnapshotId()) {
          oprot.writeI32(struct.snapshotId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.snapshotId = iprot.readI32();
          struct.setSnapshotIdIsSet(true);
        }
      }
    }

  }

  public static class initSnapshot_result implements org.apache.thrift.TBase<initSnapshot_result, initSnapshot_result._Fields>, java.io.Serializable, Cloneable, Comparable<initSnapshot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initSnapshot_result");

    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initSnapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initSnapshot_resultTupleSchemeFactory());
    }

    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initSnapshot_result.class, metaDataMap);
    }

    public initSnapshot_result() {
    }

    public initSnapshot_result(
      SystemException systemException)
    {
      this();
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initSnapshot_result(initSnapshot_result other) {
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public initSnapshot_result deepCopy() {
      return new initSnapshot_result(this);
    }

    @Override
    public void clear() {
      this.systemException = null;
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public initSnapshot_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initSnapshot_result)
        return this.equals((initSnapshot_result)that);
      return false;
    }

    public boolean equals(initSnapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(initSnapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initSnapshot_result(");
      boolean first = true;

      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initSnapshot_resultStandardSchemeFactory implements SchemeFactory {
      public initSnapshot_resultStandardScheme getScheme() {
        return new initSnapshot_resultStandardScheme();
      }
    }

    private static class initSnapshot_resultStandardScheme extends StandardScheme<initSnapshot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initSnapshot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initSnapshot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initSnapshot_resultTupleSchemeFactory implements SchemeFactory {
      public initSnapshot_resultTupleScheme getScheme() {
        return new initSnapshot_resultTupleScheme();
      }
    }

    private static class initSnapshot_resultTupleScheme extends TupleScheme<initSnapshot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSystemException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class Marker_args implements org.apache.thrift.TBase<Marker_args, Marker_args._Fields>, java.io.Serializable, Cloneable, Comparable<Marker_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Marker_args");

    private static final org.apache.thrift.protocol.TField BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("branchId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SNAPSHOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Marker_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Marker_argsTupleSchemeFactory());
    }

    public BranchID branchId; // required
    public int snapshotId; // required
    public int messageId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BRANCH_ID((short)1, "branchId"),
      SNAPSHOT_ID((short)2, "snapshotId"),
      MESSAGE_ID((short)3, "messageId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BRANCH_ID
            return BRANCH_ID;
          case 2: // SNAPSHOT_ID
            return SNAPSHOT_ID;
          case 3: // MESSAGE_ID
            return MESSAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SNAPSHOTID_ISSET_ID = 0;
    private static final int __MESSAGEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("branchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BranchID.class)));
      tmpMap.put(_Fields.SNAPSHOT_ID, new org.apache.thrift.meta_data.FieldMetaData("snapshotId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Marker_args.class, metaDataMap);
    }

    public Marker_args() {
    }

    public Marker_args(
      BranchID branchId,
      int snapshotId,
      int messageId)
    {
      this();
      this.branchId = branchId;
      this.snapshotId = snapshotId;
      setSnapshotIdIsSet(true);
      this.messageId = messageId;
      setMessageIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Marker_args(Marker_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBranchId()) {
        this.branchId = new BranchID(other.branchId);
      }
      this.snapshotId = other.snapshotId;
      this.messageId = other.messageId;
    }

    public Marker_args deepCopy() {
      return new Marker_args(this);
    }

    @Override
    public void clear() {
      this.branchId = null;
      setSnapshotIdIsSet(false);
      this.snapshotId = 0;
      setMessageIdIsSet(false);
      this.messageId = 0;
    }

    public BranchID getBranchId() {
      return this.branchId;
    }

    public Marker_args setBranchId(BranchID branchId) {
      this.branchId = branchId;
      return this;
    }

    public void unsetBranchId() {
      this.branchId = null;
    }

    /** Returns true if field branchId is set (has been assigned a value) and false otherwise */
    public boolean isSetBranchId() {
      return this.branchId != null;
    }

    public void setBranchIdIsSet(boolean value) {
      if (!value) {
        this.branchId = null;
      }
    }

    public int getSnapshotId() {
      return this.snapshotId;
    }

    public Marker_args setSnapshotId(int snapshotId) {
      this.snapshotId = snapshotId;
      setSnapshotIdIsSet(true);
      return this;
    }

    public void unsetSnapshotId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID);
    }

    /** Returns true if field snapshotId is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshotId() {
      return EncodingUtils.testBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID);
    }

    public void setSnapshotIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID, value);
    }

    public int getMessageId() {
      return this.messageId;
    }

    public Marker_args setMessageId(int messageId) {
      this.messageId = messageId;
      setMessageIdIsSet(true);
      return this;
    }

    public void unsetMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    public void setMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BRANCH_ID:
        if (value == null) {
          unsetBranchId();
        } else {
          setBranchId((BranchID)value);
        }
        break;

      case SNAPSHOT_ID:
        if (value == null) {
          unsetSnapshotId();
        } else {
          setSnapshotId((Integer)value);
        }
        break;

      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BRANCH_ID:
        return getBranchId();

      case SNAPSHOT_ID:
        return Integer.valueOf(getSnapshotId());

      case MESSAGE_ID:
        return Integer.valueOf(getMessageId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BRANCH_ID:
        return isSetBranchId();
      case SNAPSHOT_ID:
        return isSetSnapshotId();
      case MESSAGE_ID:
        return isSetMessageId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Marker_args)
        return this.equals((Marker_args)that);
      return false;
    }

    public boolean equals(Marker_args that) {
      if (that == null)
        return false;

      boolean this_present_branchId = true && this.isSetBranchId();
      boolean that_present_branchId = true && that.isSetBranchId();
      if (this_present_branchId || that_present_branchId) {
        if (!(this_present_branchId && that_present_branchId))
          return false;
        if (!this.branchId.equals(that.branchId))
          return false;
      }

      boolean this_present_snapshotId = true;
      boolean that_present_snapshotId = true;
      if (this_present_snapshotId || that_present_snapshotId) {
        if (!(this_present_snapshotId && that_present_snapshotId))
          return false;
        if (this.snapshotId != that.snapshotId)
          return false;
      }

      boolean this_present_messageId = true;
      boolean that_present_messageId = true;
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (this.messageId != that.messageId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(Marker_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBranchId()).compareTo(other.isSetBranchId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBranchId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branchId, other.branchId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSnapshotId()).compareTo(other.isSetSnapshotId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshotId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotId, other.snapshotId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Marker_args(");
      boolean first = true;

      sb.append("branchId:");
      if (this.branchId == null) {
        sb.append("null");
      } else {
        sb.append(this.branchId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snapshotId:");
      sb.append(this.snapshotId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      sb.append(this.messageId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (branchId != null) {
        branchId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Marker_argsStandardSchemeFactory implements SchemeFactory {
      public Marker_argsStandardScheme getScheme() {
        return new Marker_argsStandardScheme();
      }
    }

    private static class Marker_argsStandardScheme extends StandardScheme<Marker_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Marker_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BRANCH_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.branchId = new BranchID();
                struct.branchId.read(iprot);
                struct.setBranchIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SNAPSHOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.snapshotId = iprot.readI32();
                struct.setSnapshotIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageId = iprot.readI32();
                struct.setMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Marker_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.branchId != null) {
          oprot.writeFieldBegin(BRANCH_ID_FIELD_DESC);
          struct.branchId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SNAPSHOT_ID_FIELD_DESC);
        oprot.writeI32(struct.snapshotId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeI32(struct.messageId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Marker_argsTupleSchemeFactory implements SchemeFactory {
      public Marker_argsTupleScheme getScheme() {
        return new Marker_argsTupleScheme();
      }
    }

    private static class Marker_argsTupleScheme extends TupleScheme<Marker_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Marker_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBranchId()) {
          optionals.set(0);
        }
        if (struct.isSetSnapshotId()) {
          optionals.set(1);
        }
        if (struct.isSetMessageId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBranchId()) {
          struct.branchId.write(oprot);
        }
        if (struct.isSetSnapshotId()) {
          oprot.writeI32(struct.snapshotId);
        }
        if (struct.isSetMessageId()) {
          oprot.writeI32(struct.messageId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Marker_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.branchId = new BranchID();
          struct.branchId.read(iprot);
          struct.setBranchIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.snapshotId = iprot.readI32();
          struct.setSnapshotIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.messageId = iprot.readI32();
          struct.setMessageIdIsSet(true);
        }
      }
    }

  }

  public static class Marker_result implements org.apache.thrift.TBase<Marker_result, Marker_result._Fields>, java.io.Serializable, Cloneable, Comparable<Marker_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Marker_result");

    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Marker_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Marker_resultTupleSchemeFactory());
    }

    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Marker_result.class, metaDataMap);
    }

    public Marker_result() {
    }

    public Marker_result(
      SystemException systemException)
    {
      this();
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Marker_result(Marker_result other) {
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public Marker_result deepCopy() {
      return new Marker_result(this);
    }

    @Override
    public void clear() {
      this.systemException = null;
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public Marker_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Marker_result)
        return this.equals((Marker_result)that);
      return false;
    }

    public boolean equals(Marker_result that) {
      if (that == null)
        return false;

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(Marker_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Marker_result(");
      boolean first = true;

      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Marker_resultStandardSchemeFactory implements SchemeFactory {
      public Marker_resultStandardScheme getScheme() {
        return new Marker_resultStandardScheme();
      }
    }

    private static class Marker_resultStandardScheme extends StandardScheme<Marker_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Marker_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Marker_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Marker_resultTupleSchemeFactory implements SchemeFactory {
      public Marker_resultTupleScheme getScheme() {
        return new Marker_resultTupleScheme();
      }
    }

    private static class Marker_resultTupleScheme extends TupleScheme<Marker_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Marker_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSystemException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Marker_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class retrieveSnapshot_args implements org.apache.thrift.TBase<retrieveSnapshot_args, retrieveSnapshot_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveSnapshot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveSnapshot_args");

    private static final org.apache.thrift.protocol.TField SNAPSHOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveSnapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveSnapshot_argsTupleSchemeFactory());
    }

    public int snapshotId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SNAPSHOT_ID((short)1, "snapshotId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SNAPSHOT_ID
            return SNAPSHOT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SNAPSHOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SNAPSHOT_ID, new org.apache.thrift.meta_data.FieldMetaData("snapshotId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveSnapshot_args.class, metaDataMap);
    }

    public retrieveSnapshot_args() {
    }

    public retrieveSnapshot_args(
      int snapshotId)
    {
      this();
      this.snapshotId = snapshotId;
      setSnapshotIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveSnapshot_args(retrieveSnapshot_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.snapshotId = other.snapshotId;
    }

    public retrieveSnapshot_args deepCopy() {
      return new retrieveSnapshot_args(this);
    }

    @Override
    public void clear() {
      setSnapshotIdIsSet(false);
      this.snapshotId = 0;
    }

    public int getSnapshotId() {
      return this.snapshotId;
    }

    public retrieveSnapshot_args setSnapshotId(int snapshotId) {
      this.snapshotId = snapshotId;
      setSnapshotIdIsSet(true);
      return this;
    }

    public void unsetSnapshotId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID);
    }

    /** Returns true if field snapshotId is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshotId() {
      return EncodingUtils.testBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID);
    }

    public void setSnapshotIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SNAPSHOTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SNAPSHOT_ID:
        if (value == null) {
          unsetSnapshotId();
        } else {
          setSnapshotId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SNAPSHOT_ID:
        return Integer.valueOf(getSnapshotId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SNAPSHOT_ID:
        return isSetSnapshotId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveSnapshot_args)
        return this.equals((retrieveSnapshot_args)that);
      return false;
    }

    public boolean equals(retrieveSnapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_snapshotId = true;
      boolean that_present_snapshotId = true;
      if (this_present_snapshotId || that_present_snapshotId) {
        if (!(this_present_snapshotId && that_present_snapshotId))
          return false;
        if (this.snapshotId != that.snapshotId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(retrieveSnapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSnapshotId()).compareTo(other.isSetSnapshotId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshotId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotId, other.snapshotId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveSnapshot_args(");
      boolean first = true;

      sb.append("snapshotId:");
      sb.append(this.snapshotId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveSnapshot_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveSnapshot_argsStandardScheme getScheme() {
        return new retrieveSnapshot_argsStandardScheme();
      }
    }

    private static class retrieveSnapshot_argsStandardScheme extends StandardScheme<retrieveSnapshot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveSnapshot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SNAPSHOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.snapshotId = iprot.readI32();
                struct.setSnapshotIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveSnapshot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SNAPSHOT_ID_FIELD_DESC);
        oprot.writeI32(struct.snapshotId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveSnapshot_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveSnapshot_argsTupleScheme getScheme() {
        return new retrieveSnapshot_argsTupleScheme();
      }
    }

    private static class retrieveSnapshot_argsTupleScheme extends TupleScheme<retrieveSnapshot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSnapshotId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSnapshotId()) {
          oprot.writeI32(struct.snapshotId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.snapshotId = iprot.readI32();
          struct.setSnapshotIdIsSet(true);
        }
      }
    }

  }

  public static class retrieveSnapshot_result implements org.apache.thrift.TBase<retrieveSnapshot_result, retrieveSnapshot_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveSnapshot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveSnapshot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveSnapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveSnapshot_resultTupleSchemeFactory());
    }

    public LocalSnapshot success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LocalSnapshot.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveSnapshot_result.class, metaDataMap);
    }

    public retrieveSnapshot_result() {
    }

    public retrieveSnapshot_result(
      LocalSnapshot success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveSnapshot_result(retrieveSnapshot_result other) {
      if (other.isSetSuccess()) {
        this.success = new LocalSnapshot(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public retrieveSnapshot_result deepCopy() {
      return new retrieveSnapshot_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public LocalSnapshot getSuccess() {
      return this.success;
    }

    public retrieveSnapshot_result setSuccess(LocalSnapshot success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public retrieveSnapshot_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LocalSnapshot)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveSnapshot_result)
        return this.equals((retrieveSnapshot_result)that);
      return false;
    }

    public boolean equals(retrieveSnapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(retrieveSnapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveSnapshot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveSnapshot_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveSnapshot_resultStandardScheme getScheme() {
        return new retrieveSnapshot_resultStandardScheme();
      }
    }

    private static class retrieveSnapshot_resultStandardScheme extends StandardScheme<retrieveSnapshot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveSnapshot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LocalSnapshot();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveSnapshot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveSnapshot_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveSnapshot_resultTupleScheme getScheme() {
        return new retrieveSnapshot_resultTupleScheme();
      }
    }

    private static class retrieveSnapshot_resultTupleScheme extends TupleScheme<retrieveSnapshot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new LocalSnapshot();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

}
